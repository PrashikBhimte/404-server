user=User(id='cdee285c-af2c-4788-87a2-8db3823cc230', app_metadata={'provider': 'email', 'providers': ['email']}, user_metadata={'email': 'prashikbhimte29@gmail.com', 'email_verified': False, 'phone_verified': False, 'sub': 'cdee285c-af2c-4788-87a2-8db3823cc230'}, aud='authenticated', confirmation_sent_at=datetime.datetime(2025, 2, 17, 5, 21, 53, 453000, tzinfo=TzInfo(UTC)), recovery_sent_at=None, email_change_sent_at=None, new_email=None, new_phone=None, invited_at=None, action_link=None, email='prashikbhimte29@gmail.com', phone='', created_at=datetime.datetime(2025, 2, 17, 5, 21, 53, 407054, tzinfo=TzInfo(UTC)), confirmed_at=None, email_confirmed_at=None, phone_confirmed_at=None, last_sign_in_at=None, role='authenticated', updated_at=datetime.datetime(2025, 2, 17, 5, 21, 56, 419565, tzinfo=TzInfo(UTC)), identities=[UserIdentity(id='cdee285c-af2c-4788-87a2-8db3823cc230', identity_id='301c47f2-3553-49cc-a293-50d186e4ad36', user_id='cdee285c-af2c-4788-87a2-8db3823cc230', identity_data={'email': 'prashikbhimte29@gmail.com', 'email_verified': False, 'phone_verified': False, 'sub': 'cdee285c-af2c-4788-87a2-8db3823cc230'}, provider='email', created_at=datetime.datetime(2025, 2, 17, 5, 21, 53, 442285, tzinfo=TzInfo(UTC)), last_sign_in_at=datetime.datetime(2025, 2, 17, 5, 21, 53, 442210, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2025, 2, 17, 5, 21, 53, 442285, tzinfo=TzInfo(UTC)))], is_anonymous=False, factors=None) session=None



if student :
    branch
    club
    collegeRegNo
    email
    fullName
    parentEmail
    parentPhone
    poistion
    profilePhoto
    role student | faculty
    year
    password

if faculty
    collegeId
    department
    desgination
    email
    fullName
    phone
    profilePhoto
    role
    password







    "eyJhbGciOiJIUzI1NiIsImtpZCI6IjBYeXpjSm1ZYTVmRVhBSTUiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL3BtcGxvZXZ4c3FlbHZ3bXJ3aGZwLnN1cGFiYXNlLmNvL2F1dGgvdjEiLCJzdWIiOiI0MDI3Zjc3MS0yNTZlLTQ0MWEtYmU2Yy03ZjQzZGZhOTM1YjAiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNzM5OTQzODg4LCJpYXQiOjE3Mzk5NDAyODgsImVtYWlsIjoiMjAyMmJjczAwN0BzZ2dzLmFjLmluIiwicGhvbmUiOiIiLCJhcHBfbWV0YWRhdGEiOnsicHJvdmlkZXIiOiJlbWFpbCIsInByb3ZpZGVycyI6WyJlbWFpbCJdfSwidXNlcl9tZXRhZGF0YSI6eyJlbWFpbCI6IjIwMjJiY3MwMDdAc2dncy5hYy5pbiIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwaG9uZV92ZXJpZmllZCI6ZmFsc2UsInN1YiI6IjQwMjdmNzcxLTI1NmUtNDQxYS1iZTZjLTdmNDNkZmE5MzViMCJ9LCJyb2xlIjoiYXV0aGVudGljYXRlZCIsImFhbCI6ImFhbDEiLCJhbXIiOlt7Im1ldGhvZCI6InBhc3N3b3JkIiwidGltZXN0YW1wIjoxNzM5OTAzNDM0fV0sInNlc3Npb25faWQiOiJhYzVkMzhhZC0xODEwLTRhZGUtYTRjNS1mNDMyNDQ4OTk4YzkiLCJpc19hbm9ueW1vdXMiOmZhbHNlfQ.NI7m3X6QHn2EpxGUVm9inyar7_Ac9UAn_KnsOw0UgLc"


class User(BaseModel):
    role: str
    data: dict

class Student(BaseModel):
    id : str
    branch: str
    club: str
    collegeRegNo: str
    email: str
    fullName: str
    parentEmail: str
    parentPhone: int
    position: str
    profilePhoto: str
    year: str
    password: str

class Faculty(BaseModel):
    id : str
    collegeId: str
    department: str
    desgination: str
    email: str
    fullName: str
    phone: int
    profilePhoto: str
    password: str




    @router.post('/signup')
async def signup(user: User, file: UploadFile = File(...)):
 
    user.data['id'] = "1a"

    if user.role == "student":
        validated_user = Student(**user.data)
    elif user.role == "faculty":
        validated_user = Faculty(**user.data)
    else:
        raise HTTPException(status_code=400, detail="Invalid role. Must be 'student' or 'faculty'.")

    response = supabase.auth.sign_up({
        "email": user.data['email'],
        "password": user.data['password']
    })

    if response and response.user:
        validated_user.id = response.user.id
        try:
            role = user.role.capitalize()
            inserted_data = dict(validated_user)
            inserted_data.pop("password")
            file_extension = file.filename.split(".")[-1]
            file_name = f"profile-images/{validated_user['id']}.{file_extension}"
            file_content = await file.read()
            response = supabase.storage.from_("profile-images").upload(
                file_name, io.BytesIO(file_content), content_type=file.content_type
            )
            if "error" in response:
                raise HTTPException(status_code=400, detail="Image upload failed")
            image_url = f"{supabase_url}/storage/v1/object/public/{file_name}"
            validated_user['profilePhoto'] = image_url
            response = supabase.table(role).insert(inserted_data).execute()
            return {"status": "Successfully signed up", "response" : response}
        except :
            raise HTTPException(status_code=400, detail="Unable to insert the user data.")
    
    raise HTTPException(status_code=400, detail="Signup failed. Email may already be in use.")
